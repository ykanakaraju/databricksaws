
  AWS Databricks
  -------------------------------
   Databricks Basics
   PySpark Essentials
	- Spark basics
	- Spark SQL Crash course
	- Structured Streaming basics
   Databricks on AWS
	- Setup Databricks resources on AWS
	- Access S3 from Databricks
   Databricks Lakehouse Platform 
	â€“ Delta Lake Basics
	- Delta Lake Features
   ELT with Spark SQL
   Incremental Data Processing 
	- COPY INTO command
	- Structured Streaming
	- AutoLoader
	- Schema management
   Delta Live Tables - Production pipelines	
   Unity Catalog
	- Setup Unity Catalog Metastore
	- Working with Storage Credentials and External Locations
	- Working with Metastore, Catalogs and Schema on S3
   Databricks Optimizations & Monitoring


  Materials
  ---------
  - PDF presentations
  - Code Modules (PySpark)
  - Databricks Notebooks (DBC files)
  - Class Notes
  - Github: https://github.com/ykanakaraju/databricksaws


  Getting started with Spark on Databricks
  ----------------------------------------   

   ** Databricks Community Edition (free edition)
 		
	Signup: https://www.databricks.com/try-databricks
		

	Login: https://community.cloud.databricks.com/login.html

	Downloading a file from Databricks
	----------------------------------
		/FileStore/<FILEPATH>
		https://community.cloud.databricks.com/files/<FILEPATH>?o=1072576993312365

		Example:
		dbfs:/FileStore/output/wc/part-00000
		https://community.cloud.databricks.com/files/output/wc/part-00000?o=1072576993312365

		dbfs:/FileStore/output/wordcount1/part-00000
		https://community.cloud.databricks.com/files/output/wordcount1/part-00000?o=1072576993312365


 	Enabling DBFS File browser
	--------------------------
	<your account (top-right)> -> Settings -> Advanced -> Other -> DBFS File Browser (enable it)
	(then, reload/refresh the browser page)
  
  
  Databricks Basics
  -----------------
	
	1. Compute - Spin up cluster resources
		
		1. All purpose clusters - continuously running, persistent cluster
		2. Job clusters - spinned up to execute a job and then terminated	

	2. Catalog
		-> All data is stored in Catalog
		-> All local files are store in /FileStore directory
		-> Default hive warehouse directory : /user/hive/warehouse

	3. Workspace
		-> All the notebooks are managed in the workspace


  Databricks 'dbutils'
  --------------------

	'help' command
	------------
	dbutils.help()
	dbutils.fs.help()
	dbutils.fs.help('ls')


	'ls' command
	------------
	dbutils.fs.ls("/")
	dbutils.fs.ls("/FileStore")
		list paths => [ d[0] for d in dbutils.fs.ls("/FileStore")]
	dbutils.fs.ls("/FileStore/testdata/csv")


	'mkdirs' command
	----------------
	dbutils.fs.mkdirs("/FileStore/testdata2")
	dbutils.fs.ls("/FileStore")


	'cp' command to copy files between DBFS directories
	---------------------------------------------------
	dbutils.fs.cp("/FileStore/testdata/csv/2011_summary.csv", "/FileStore/testdata2")
	dbutils.fs.cp("/FileStore/testdata/csv/2012_summary.csv", "/FileStore/testdata2")
	dbutils.fs.cp("/FileStore/testdata/csv/2013_summary.csv", "/FileStore/testdata2")

	dbutils.fs.ls("/FileStore/testdata/csv")


	'mv' command for moving or renaming files
	------------------------------------------
	dbutils.fs.help('mv')

	dbutils.fs.mv("/FileStore/testdata/csv", "/FileStore/testdata3", recurse=True)
	dbutils.fs.ls('/FileStore/testdata3')

	dbutils.fs.mv('/FileStore/testdata3/2011_summary.csv', '/FileStore/testdata3/2011_summary_renamed.csv')


	'rm' command to remove files & directories from DBFS
	-----------------------------------------------------
	dbutils.fs.rm('/FileStore/testdata3/2011_summary_renamed.csv')
	dbutils.fs.rm('/FileStore/testdata3/', recurse=True)

  
  Spark
  -----

    Spark is an open-source in-memory distributed computing framework.

	-> Spark is written in Scala

	-> Spark is a ployglot  
		-> Spark applications can be written in multiple languages
		-> Supports Python, R, Scala, Java

	-> Spark can run on multiple cluster managers
		-> Supports local, spark standalone, YARN, Mesos, Kubernetes


    Spark is a unified framework.
		
	Spark provides a consistent set of APIs for performing different analytics workloads
        using the same execution engine and some well defined data abstractions and operations.

   	Batch Analytics of unstructured data	-> Spark Core API (low-level api)
	Batch Analytics of structured data 	-> Spark SQL
	Streaming Analytics (real time)		-> Spark Streaming (DStreams API), Structured Streaming
	Predictive analytics (ML)		-> Spark MLLib  (mllib & ml)
	Graph parallel computations  		-> Spark GraphX


   Spark Architecture
   ------------------

	1. Cluster Manager (CM)
		-> Applications are submitted to CMs
		-> Allocates containers for lauching driver and executors on the cluster. 
		-> Spark supports multiple CMs
			-> local, standalone, YARN, Mesos, Kubernetes		

	2. Driver
		-> Master process
		-> Runs the 'SparkContext' object
		-> Manages the user code and sends the tasks to the executors as per the code. 

	3. SparkContext
		-> Is an application context
		-> Starting point of execution
		-> Is the link between the driver and tasks running on the executors

	4. Executors
		-> Receives the tasks from the Driver
		-> All tasks run the same code but on different partitions of the data
		-> The status of tasks are reported to the driver. 	


   Spark Core API
   ==============
    
	RDD (Resilient Distributed Dataset)
	-----------------------------------
	-> RDD is the fundamental data abstraction of Spark

	-> RDD is a collection of distributed in-memory partitions.
	    -> Each partition is a collection of objects of some type.

	-> RDDs are immutable

	-> RDDs are lazily evaluated
	   -> Transformations does not cause execution.
	   -> Action commands trigger execution.


   	Creating RDDs
   	-------------
	Three ways:

	1. Creating an RDD from external files

		rdd1 = sc.textFile(<path>, 4)

	2. Creating RDD from programmatic data

		rdd1 = sc.parallelize([1,3,2,4,2,6,8,7,9,0,5,7,6,8,9,4,3,6,5,8,0], 2)

	3. By transforming existing RDD

		rdd2 = rdd1.flatMap(lamda x: x.split())


   	RDD Operations
   	--------------
	Two types of operations:

	1. Transformations
		-> Create lineage DAG (logical plan)
		-> Does not cause execution

	2. Actions
		-> Execute RDDs
		-> Lauches a job on the cluster



  	RDD Lineage DAG
  	---------------
    	Driver maintains a Lineage DAG for every RDD.
    	Lineage DAG is a heirarchy of dependencies of RDDs all the way starting from the very first RDD.	
    	Lineage DAG is a logical plan on how to create the RDD partitions.


	rddFile = sc.textFile("E:\\Spark\\wordcount.txt", 4)
	Lineage DAG: (4) rddFile -> sc.textFile on E:\\Spark\\wordcount.txt

	rddWords = rddFile.flatMap(lambda x: x.split())
	Lineage DAG: (4) rddWords -> rddFile.flatMap -> sc.textFile

	rddPairs = rddWords.map(lambda x: (x, 1))
	Lineage DAG: (4) rddPairs -> rddWords.map -> rddFile.flatMap -> sc.textFile

	rddWc = rddPairs.reduceByKey(lambda x, y: x + y)
	Lineage DAG: (4) rddWc -> rddPairs.reduceByKey -> rddWords.map -> rddFile.flatMap -> sc.textFile
   


  ================================
     Spark SQL (pyspark.sql)
  ================================ 


    -> High Level API built on top of Spark Core

	File Formats : Parquet (default), ORC, JSON, CSV (delimited text), Text (and Avro)
	JDBC Format  : RDBMS, NoSQL
	Hive Format  : Hive Warehouse


   SparkSession
   ------------
	-> Starting point of execution
	-> Represents a user session (SparkSession) running inside an application (SparkContext)
	-> Each SparkSession can have its own configuration


	from pyspark.sql import SparkSession

	spark = SparkSession \
    		.builder \
    		.appName("Basic Dataframe Operations") \
    		.config("spark.master", "local") \
    		.getOrCreate() 





















